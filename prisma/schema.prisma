generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Ciudad {
  idCiudad      Int              @id @default(autoincrement()) @map("id_ciudad")
  nombreCiudad  String           @map("nombre_ciudad") @db.VarChar(100)
  createdAt     DateTime?        @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  escuela        Escuela[]
  organizaciones Organizacion[]
  persona        Persona[]

  @@map("ciudad")
}

model Escuela {
  idEscuela       String         @id @default(dbgenerated("gen_random_uuid()")) @map("id_escuela") @db.Uuid
  nombre          String         @db.VarChar(200)
  direccion       String?        @db.VarChar(255)
  idCiudad        Int?           @map("id_ciudad")
  idOrganizacion  String         @map("id_organizacion") @db.Uuid
  createdAt       DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  ciudad        Ciudad?       @relation(fields: [idCiudad], references: [idCiudad], onDelete: NoAction, onUpdate: NoAction)
  organizacion  Organizacion  @relation(fields: [idOrganizacion], references: [idOrganizacion], onDelete: NoAction, onUpdate: NoAction)
  escuelaEncargado EscuelaEncargado[]
  menuSemanal      MenuSemanal[]
  ordenCompra      OrdenCompra[]

  @@map("escuela")
}

model EscuelaEncargado {
  idEscuela   String    @map("id_escuela") @db.Uuid
  idPersona   String    @map("id_persona") @db.Uuid
  cargo       String?   @default("Director") @db.VarChar(100)
  fechaDesde  DateTime? @default(dbgenerated("CURRENT_DATE")) @map("fecha_desde") @db.Date
  fechaHasta  DateTime? @map("fecha_hasta") @db.Date
  observaciones String?

  // relaciones
  escuela  Escuela  @relation(fields: [idEscuela], references: [idEscuela], onDelete: NoAction, onUpdate: NoAction)
  persona  Persona  @relation(fields: [idPersona], references: [idPersona], onDelete: NoAction, onUpdate: NoAction)

  @@id([idEscuela, idPersona])
  @@map("escuela_encargado")
}

model Insumo {
  idInsumo        String         @id @default(dbgenerated("gen_random_uuid()")) @map("id_insumo") @db.Uuid
  nombreInsumo    String         @map("nombre_insumo") @db.VarChar(255)
  descripcion     String?        @db.VarChar(255)
  idTipoInsumo    Int            @map("id_tipo_insumo")
  idUnidadMedida  Int            @map("id_unidad_medida")
  codigoBarra     String?        @unique @map("codigo_barra") @db.VarChar(20)
  createdAt       DateTime?      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?      @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt       DateTime?      @map("deleted_at") @db.Timestamp(6)

  // relaciones
  tipoInsumo         TipoInsumo         @relation(fields: [idTipoInsumo], references: [idTipoInsumo], onDelete: NoAction, onUpdate: NoAction)
  unidadMedida       UnidadMedida       @relation(fields: [idUnidadMedida], references: [idUnidadMedida], onDelete: NoAction, onUpdate: NoAction)
  ordenCompraDetalle OrdenCompraDetalle[]
  recetaPlato        RecetaPlato[]

  @@map("insumo")
}

model MenuDia {
  idMenuDia       String        @id @default(dbgenerated("gen_random_uuid()")) @map("id_menu_dia") @db.Uuid
  idMenuSemanal   String        @map("id_menu_semanal") @db.Uuid
  fecha           DateTime      @db.Date
  cantidadRaciones Int          @map("cantidad_raciones")
  observaciones   String?
  createdAt       DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  menuSemanal   MenuSemanal  @relation(fields: [idMenuSemanal], references: [idMenuSemanal], onDelete: NoAction, onUpdate: NoAction)
  menuDiaPlato  MenuDiaPlato[]

  @@map("menu_dia")
}

model MenuDiaPlato {
  idMenuDia String @map("id_menu_dia") @db.Uuid
  idPlato   String @map("id_plato") @db.Uuid
  orden     Int?   @default(1)

  // relaciones
  menuDia MenuDia @relation(fields: [idMenuDia], references: [idMenuDia], onDelete: NoAction, onUpdate: NoAction)
  plato   Plato   @relation(fields: [idPlato], references: [idPlato], onDelete: NoAction, onUpdate: NoAction)

  @@id([idMenuDia, idPlato])
  @@map("menu_dia_plato")
}

model MenuSemanal {
  idMenuSemanal String        @id @default(dbgenerated("gen_random_uuid()")) @map("id_menu_semanal") @db.Uuid
  semana        DateTime      @db.Date
  idEscuela     String        @map("id_escuela") @db.Uuid
  idOrganizacion String       @map("id_organizacion") @db.Uuid
  observaciones String?
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  menuDia      MenuDia[]
  escuela      Escuela       @relation(fields: [idEscuela], references: [idEscuela], onDelete: NoAction, onUpdate: NoAction)
  organizacion Organizacion  @relation(fields: [idOrganizacion], references: [idOrganizacion], onDelete: NoAction, onUpdate: NoAction)
  ordenCompra  OrdenCompra[]

  @@map("menu_semanal")
}

model OrdenCompra {
  idOrdenCompra   String        @id @default(dbgenerated("gen_random_uuid()")) @map("id_orden_compra") @db.Uuid
  idMenuSemanal   String?       @map("id_menu_semanal") @db.Uuid
  idEscuela       String        @map("id_escuela") @db.Uuid
  fechaOrden      DateTime      @map("fecha_orden") @db.Date
  estado          String?       @default("PENDIENTE") @db.VarChar(50)
  observaciones   String?
  createdAt       DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  escuela     Escuela      @relation(fields: [idEscuela], references: [idEscuela], onDelete: NoAction, onUpdate: NoAction)
  menuSemanal MenuSemanal? @relation(fields: [idMenuSemanal], references: [idMenuSemanal], onDelete: NoAction, onUpdate: NoAction)
  ordenCompraDetalle OrdenCompraDetalle[]

  @@map("orden_compra")
}

model OrdenCompraDetalle {
  idOrdenCompra  String   @map("id_orden_compra") @db.Uuid
  idInsumo       String   @map("id_insumo") @db.Uuid
  cantidad       Decimal  @db.Decimal(12, 3)
  idUnidadMedida Int      @map("id_unidad_medida")
  precioUnitario Decimal? @map("precio_unitario") @db.Decimal(12, 2)
  observaciones  String?

  // relaciones
  insumo       Insumo       @relation(fields: [idInsumo], references: [idInsumo], onDelete: NoAction, onUpdate: NoAction)
  ordenCompra  OrdenCompra  @relation(fields: [idOrdenCompra], references: [idOrdenCompra], onDelete: NoAction, onUpdate: NoAction)
  unidadMedida UnidadMedida @relation(fields: [idUnidadMedida], references: [idUnidadMedida], onDelete: NoAction, onUpdate: NoAction)

  @@id([idOrdenCompra, idInsumo])
  @@map("orden_compra_detalle")
}

model Organizacion {
  idOrganizacion String     @id @default(dbgenerated("gen_random_uuid()")) @map("id_organizacion") @db.Uuid
  razonSocial    String     @map("razon_social") @db.VarChar(255)
  ruc            String     @unique @db.VarChar(20)
  direccion      String?    @db.VarChar(255)
  correo         String?    @db.VarChar(255)
  telefono       String?    @db.VarChar(30)
  idCiudad       Int?       @map("id_ciudad")
  createdAt      DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime?  @map("deleted_at") @db.Timestamp(6)

  // relaciones
  escuela        Escuela[]
  menuSemanal    MenuSemanal[]
  ciudad         Ciudad?    @relation(fields: [idCiudad], references: [idCiudad], onDelete: NoAction, onUpdate: NoAction)
  usuario        Usuario[]

  @@map("organizaciones")
}

model Persona {
  idPersona       String     @id @default(dbgenerated("gen_random_uuid()")) @map("id_persona") @db.Uuid
  nroDocumento    String     @unique @map("nro_documento") @db.VarChar(30)
  nombre          String     @db.VarChar(100)
  apellido        String     @db.VarChar(100)
  fechaNacimiento DateTime?  @map("fecha_nacimiento") @db.Date
  direccion       String?    @db.VarChar(255)
  nroTelefono     String?    @map("nro_telefono") @db.VarChar(30)
  correoPersona   String     @map("correo_persona") @db.VarChar(255)
  idCiudad        Int?       @map("id_ciudad")
  idTipoDocumento Int?       @map("id_tipo_documento")
  createdAt       DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt       DateTime?  @map("deleted_at") @db.Timestamp(6)

  // relaciones
  escuelaEncargado EscuelaEncargado[]
  ciudad           Ciudad?         @relation(fields: [idCiudad], references: [idCiudad], onDelete: NoAction, onUpdate: NoAction)
  tipoDocumento    TipoDocumento?  @relation(fields: [idTipoDocumento], references: [idTipoDocumento], onDelete: NoAction, onUpdate: NoAction)
  usuario          Usuario[]

  @@map("persona")
}

model Plato {
  idPlato           String    @id @default(dbgenerated("gen_random_uuid()")) @map("id_plato") @db.Uuid
  nombre            String    @db.VarChar(255)
  descripcion       String?   @db.Text
  esEjemplo         Boolean   @default(false) @map("es_ejemplo")
  idTipoPlato       Int       @map("id_tipo_plato")
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)

  // relaciones
  tipoPlato       TipoPlato             @relation(fields: [idTipoPlato], references: [idTipoPlato])
  porciones       PorcionNivelEscolar[]
  menuDiaPlato    MenuDiaPlato[]
  recetaPlato     RecetaPlato[]

  @@map("plato")
}

model NivelEscolar {
  idNivelEscolar   Int      @id @default(autoincrement()) @map("id_nivel_escolar")
  nombre           String   @unique @db.VarChar(50) // "INICIAL", "PRIMER_SEGUNDO_CICLO", "TERCER_CICLO"
  descripcion      String?  @db.VarChar(255)
  edadMinima       Int?     @map("edad_minima")
  edadMaxima       Int?     @map("edad_maxima")
  orden            Int      @unique // Para ordenar los niveles: 1, 2, 3
  activo           Boolean  @default(true)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  porcionNivelEscolar PorcionNivelEscolar[]

  @@map("nivel_escolar")
}

model PorcionNivelEscolar {
  idPorcion        String   @id @default(dbgenerated("gen_random_uuid()")) @map("id_porcion") @db.Uuid
  idPlato          String   @map("id_plato") @db.Uuid
  idNivelEscolar   Int      @map("id_nivel_escolar")
  cantidad         Decimal  @db.Decimal(10, 2)
  idUnidadMedida   Int      @map("id_unidad_medida")
  observaciones    String?
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  plato          Plato          @relation(fields: [idPlato], references: [idPlato], onDelete: Cascade)
  nivelEscolar   NivelEscolar   @relation(fields: [idNivelEscolar], references: [idNivelEscolar], onDelete: NoAction, onUpdate: NoAction)
  unidadMedida   UnidadMedida   @relation(fields: [idUnidadMedida], references: [idUnidadMedida], onDelete: NoAction, onUpdate: NoAction)

  @@unique([idPlato, idNivelEscolar])
  @@map("porcion_nivel_escolar")
}

model RecetaPlato {
  idPlato         String   @map("id_plato") @db.Uuid
  idInsumo        String   @map("id_insumo") @db.Uuid
  cantidadPorRacion Decimal @map("cantidad_por_racion") @db.Decimal(10, 3)
  idUnidadMedida  Int      @map("id_unidad_medida")
  pesoBruto       Decimal? @map("peso_bruto") @db.Decimal(10, 3)
  pesoNeto        Decimal? @map("peso_neto") @db.Decimal(10, 3)

  // relaciones
  insumo       Insumo       @relation(fields: [idInsumo], references: [idInsumo], onDelete: NoAction, onUpdate: NoAction)
  plato        Plato        @relation(fields: [idPlato], references: [idPlato], onDelete: NoAction, onUpdate: NoAction)
  unidadMedida UnidadMedida @relation(fields: [idUnidadMedida], references: [idUnidadMedida], onDelete: NoAction, onUpdate: NoAction)

  @@id([idPlato, idInsumo])
  @@map("receta_plato")
}

model TipoDocumento {
  idTipoDocumento   Int       @id @default(autoincrement()) @map("id_tipo_documento")
  descTipoDocumento String    @map("desc_tipo_documento") @db.VarChar(100)
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  persona Persona[]

  @@map("tipo_documento")
}

model TipoPlato {
  idTipoPlato   Int       @id @default(autoincrement()) @map("id_tipo_plato")
  nombre        String    @db.VarChar(50)
  descripcion   String?   @db.VarChar(255)
  orden         Int       @unique // Para ordenar: 1=almuerzo, 2=ensalada, 3=postre
  activo        Boolean   @default(true)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  platos Plato[]

  @@map("tipo_plato")
}

model TipoInsumo {
  idTipoInsumo  Int     @id @default(autoincrement()) @map("id_tipo_insumo")
  descTipoInsumo String @map("desc_tipo_insumo") @db.VarChar(100)
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  // relaciones
  insumo Insumo[]

  @@map("tipo_insumo")
}

model UnidadMedida {
  idUnidadMedida   Int       @id @default(autoincrement()) @map("id_unidad_medida")
  descUnidadMedida String    @map("desc_unidad_medida") @db.VarChar(250)
  abreviatura      String    @db.VarChar(10)
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)

  // relaciones
  insumo               Insumo[]
  ordenCompraDetalle   OrdenCompraDetalle[]
  recetaPlato          RecetaPlato[]
  porcionNivelEscolar  PorcionNivelEscolar[]

  @@map("unidad_medida")
}

model Usuario {
  idUsuario      String     @id @default(dbgenerated("gen_random_uuid()")) @map("id_usuario") @db.Uuid
  nombreUsuario  String     @map("nombre_usuario") @db.VarChar(50)
  idPersona      String     @map("id_persona") @db.Uuid
  idOrganizacion String     @map("id_organizacion") @db.Uuid
  estadoUsuario  String     @map("estado_usuario")
  createdAt      DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime?  @map("deleted_at") @db.Timestamp(6)

  // relaciones
  organizacion Organizacion @relation(fields: [idOrganizacion], references: [idOrganizacion], onDelete: NoAction, onUpdate: NoAction)
  persona      Persona      @relation(fields: [idPersona], references: [idPersona], onDelete: NoAction, onUpdate: NoAction)
  authUser     AuthUser?    @relation("UsuarioToAuthUser") // Solo el nombre de la relación

  @@map("usuario")
}

model AuthUser {
  idAuthUser String @id @default(dbgenerated("gen_random_uuid()")) @map("id_auth_user") @db.Uuid
  email      String @unique @db.VarChar(255)
  password   String @db.VarChar(255)
  supabaseId String? @unique @map("supabase_id") @db.VarChar(255)
  idUsuario  String @map("id_usuario") @db.Uuid
  usuario    Usuario @relation("UsuarioToAuthUser", fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

  @@unique([idUsuario])
  @@map("auth_user")
}
